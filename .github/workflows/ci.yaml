name: Build and Deploy

on:
  push:
    # branches: [ main ]

concurrency: ci-${{ github.ref }}

env:
  assets-bucket: whobrokethecloud-assets

jobs:
  api:
    runs-on: ubuntu-latest
    name: Build and Deploy API Image
    env:
      working-directory: ./api
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to registry.myhomelab.network
        uses: docker/login-action@v2
        with:
          registry: registry.myhomelab.network
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Build docker image
        uses: docker/build-push-action@v3
        with:
          context: ${{ env.working-directory }}/
          file: ${{ env.working-directory }}/Dockerfile
          tags: registry.myhomelab.network/whobrokethecloud/api:0.1.1,registry.myhomelab.network/whobrokethecloud/api:latest
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
      # - name: Setup go
      #   uses: actions/setup-go@v3
      #   with:
      #     go-version-file: ${{ env.working-directory }}/go.mod
      #     cache: true
      #     cache-dependency-path: ${{ env.working-directory }}/go.sum
      # - name: Go test
      #   if: always()
      #   run: go test ./...
      #   working-directory: ${{ env.working-directory }}
      # - name: Go vet
      #   if: always()
      #   run: go vet ./...
      #   working-directory: ${{ env.working-directory }}
      # - name: Staticcheck
      #   if: always()
      #   uses: dominikh/staticcheck-action@v1.2.0
      #   with:
      #     version: "2022.1.1"
      #     install-go: false
      #     cache-key: ${{ matrix.go }}
      #     working-directory: ${{ env.working-directory }}
  frontend:
    name: Build and Deploy Frontend Assets
    runs-on: ubuntu-latest
    env:
      working-directory: ./frontend
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.JS 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - run: npm ci
        working-directory: ${{ env.working-directory }}
      - run: npm run build
        env:
          CI: false
        working-directory: ${{ env.working-directory }}
      - run: python -m pip install s3cmd
      - name: Upload frontend assets to object storage
        run: |
            s3cmd \
              --host=us-east-1.linodeobjects.com \
              --host-bucket="%(bucket)s.us-east-1.linodeobjects.com" \
              --no-mime-magic \
              --acl-public \
              sync \
              ${{ env.working-directory }}/build/ \
              s3://${{ env.assets-bucket }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  deploy:
    name: Deply helm chart
    needs:
      - frontend
      - api
    runs-on: ubuntu-latest
    env:
      LINODE_CLI_TOKEN: ${{ secrets.LINODE_CLI_TOKEN_K8S_RO }}
    steps:
      - uses: actions/checkout@v3
      - name: Install linode-cli
        run: pip install linode-cli
      - name: Get Cluster ID
        id: cluster_id
        run: |
          CLUSTER_ID=$(linode-cli lke clusters-list --json | jq '.[] | select(.label == "production") | .id')
          echo "::set-output name=cluster_id::${CLUSTER_ID}"
      - name: Get Cluster kubeconfig
        run: |
          test -d ~/.kube || mkdir -p ~/.kube
          linode-cli lke kubeconfig-view ${{ steps.cluster_id.outputs.stdout }} > ~/.kube/config
          kubectl get pods

